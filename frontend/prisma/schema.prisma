generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String
  role          Role      @default(STAFF)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  DOCTOR
  NURSE
  STAFF
}

model Patient {
  id         String      @id @default(cuid())
  firstName  String
  lastName   String
  dob        DateTime
  phone      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  encounters Encounter[]
  documents  Document[]
}

model Encounter {
  id          String   @id @default(cuid())
  patientId   String
  startedAt   DateTime @default(now())
  transcript  String?
  soapNote    String?
  icdCodes    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patient     Patient  @relation(fields: [patientId], references: [id])
}

model Document {
  id        String   @id @default(cuid())
  patientId String
  s3Key     String
  mimeType  String
  createdAt DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  ip        String?
  createdAt DateTime @default(now())
}
